// This file is @generated by prost-build.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct F16State {
    #[prost(double, tag = "1")]
    pub vt: f64,
    #[prost(double, tag = "2")]
    pub alpha: f64,
    #[prost(double, tag = "3")]
    pub beta: f64,
    #[prost(double, tag = "4")]
    pub phi: f64,
    #[prost(double, tag = "5")]
    pub theta: f64,
    #[prost(double, tag = "6")]
    pub psi: f64,
    #[prost(double, tag = "7")]
    pub p: f64,
    #[prost(double, tag = "8")]
    pub q: f64,
    #[prost(double, tag = "9")]
    pub r: f64,
    /// Latitude in radians
    #[prost(double, tag = "10")]
    pub lat: f64,
    /// Longitude in radians
    #[prost(double, tag = "11")]
    pub lon: f64,
    /// Altitude in meters
    #[prost(double, tag = "12")]
    pub alt: f64,
    #[prost(double, tag = "13")]
    pub pow: f64,
    /// This is truly optional
    #[prost(double, optional, tag = "14")]
    pub time: ::core::option::Option<f64>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Position {
    #[prost(double, tag = "1")]
    pub alt: f64,
    #[prost(double, tag = "2")]
    pub lat: f64,
    #[prost(double, tag = "3")]
    pub lon: f64,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Target {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, optional, tag = "2")]
    pub init_state: ::core::option::Option<F16State>,
    #[prost(message, repeated, tag = "3")]
    pub waypoints: ::prost::alloc::vec::Vec<Position>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Simulation {
    #[prost(message, repeated, tag = "1")]
    pub targets: ::prost::alloc::vec::Vec<Target>,
    #[prost(double, tag = "2")]
    pub time_step: f64,
    #[prost(double, tag = "3")]
    pub max_time: f64,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulationResult {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    /// repeated double time = 2;
    #[prost(message, repeated, tag = "2")]
    pub waypoints: ::prost::alloc::vec::Vec<Position>,
    #[prost(double, tag = "3")]
    pub run_time: f64,
    #[prost(message, repeated, tag = "4")]
    pub final_state: ::prost::alloc::vec::Vec<F16State>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulationResultList {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SimulationResult>,
}
