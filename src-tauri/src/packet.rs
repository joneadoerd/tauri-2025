// This file is @generated by prost-build.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Packet {
    #[prost(oneof = "packet::Kind", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11")]
    pub kind: ::core::option::Option<packet::Kind>,
}
/// Nested message and enum types in `Packet`.
pub mod packet {
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag = "1")]
        Header(super::PacketHeader),
        #[prost(message, tag = "2")]
        Payload(super::PacketPayload),
        #[prost(message, tag = "3")]
        Checksum(super::PacketChecksum),
        #[prost(message, tag = "4")]
        Timestamp(super::PacketTimestamp),
        #[prost(message, tag = "5")]
        Source(super::PacketSource),
        #[prost(message, tag = "6")]
        Destination(super::PacketDestination),
        #[prost(message, tag = "7")]
        Protocol(super::PacketProtocol),
        #[prost(message, tag = "8")]
        Flags(super::PacketFlags),
        #[prost(message, tag = "9")]
        Version(super::PacketVersion),
        #[prost(message, tag = "10")]
        TargetPacket(super::TargetPacket),
        #[prost(message, tag = "11")]
        TargetPacketList(super::TargetPacketList),
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PacketHeader {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub length: u32,
    #[prost(uint32, tag = "3")]
    pub checksum: u32,
    #[prost(uint32, tag = "4")]
    pub version: u32,
    #[prost(uint32, tag = "5")]
    pub flags: u32,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketPayload {
    #[prost(uint32, tag = "1")]
    pub type_value: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "3")]
    pub size: u32,
    #[prost(string, tag = "4")]
    pub encoding: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketChecksum {
    #[prost(uint32, tag = "1")]
    pub algorithm: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "3")]
    pub length: u32,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PacketTimestamp {
    #[prost(uint32, tag = "1")]
    pub seconds: u32,
    #[prost(uint32, tag = "2")]
    pub nanoseconds: u32,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketSource {
    #[prost(string, tag = "1")]
    pub ip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(string, tag = "3")]
    pub mac: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketDestination {
    #[prost(string, tag = "1")]
    pub ip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(string, tag = "3")]
    pub mac: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketProtocol {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub version: u32,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PacketFlags {
    #[prost(bool, tag = "1")]
    pub is_fragmented: bool,
    #[prost(bool, tag = "2")]
    pub is_encrypted: bool,
    #[prost(bool, tag = "3")]
    pub is_compressed: bool,
    #[prost(bool, tag = "4")]
    pub is_signed: bool,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketVersion {
    #[prost(uint32, tag = "1")]
    pub major: u32,
    #[prost(uint32, tag = "2")]
    pub minor: u32,
    #[prost(uint32, tag = "3")]
    pub patch: u32,
    #[prost(string, tag = "4")]
    pub build: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketError {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub details: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketStatus {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub details: ::prost::alloc::string::String,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketResponse {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<PacketError>,
    #[prost(message, optional, tag = "5")]
    pub status: ::core::option::Option<PacketStatus>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketRequest {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub params: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<PacketError>,
    #[prost(message, optional, tag = "5")]
    pub status: ::core::option::Option<PacketStatus>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketAck {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<PacketError>,
    #[prost(message, optional, tag = "5")]
    pub status: ::core::option::Option<PacketStatus>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketNack {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<PacketError>,
    #[prost(message, optional, tag = "5")]
    pub status: ::core::option::Option<PacketStatus>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketPing {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<PacketError>,
    #[prost(message, optional, tag = "5")]
    pub status: ::core::option::Option<PacketStatus>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SerialPacketEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub packet: ::core::option::Option<Packet>,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TargetPacket {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(double, tag = "2")]
    pub lat: f64,
    #[prost(double, tag = "3")]
    pub lon: f64,
    #[prost(double, tag = "4")]
    pub alt: f64,
    #[prost(double, tag = "5")]
    pub time: f64,
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TargetPacketList {
    #[prost(message, repeated, tag = "1")]
    pub packets: ::prost::alloc::vec::Vec<TargetPacket>,
}
