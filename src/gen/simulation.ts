// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: simulation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "simulation";

export interface F16State {
  vt: number;
  alpha: number;
  beta: number;
  phi: number;
  theta: number;
  psi: number;
  p: number;
  q: number;
  r: number;
  /** Latitude in radians */
  lat: number;
  /** Longitude in radians */
  lon: number;
  /** Altitude in meters */
  alt: number;
  pow: number;
  /** This is truly optional */
  time?: number | undefined;
}

export interface Position {
  alt: number;
  lat: number;
  lon: number;
}

export interface Target {
  id: number;
  init_state: F16State | undefined;
  waypoints: Position[];
}

export interface Simulation {
  targets: Target[];
  time_step: number;
  max_time: number;
}

export interface SimulationResult {
  target_id: number;
  /** repeated double time = 2; */
  waypoints: Position[];
  run_time: number;
  final_state: F16State[];
}

export interface SimulationResultList {
  results: SimulationResult[];
}

function createBaseF16State(): F16State {
  return {
    vt: 0,
    alpha: 0,
    beta: 0,
    phi: 0,
    theta: 0,
    psi: 0,
    p: 0,
    q: 0,
    r: 0,
    lat: 0,
    lon: 0,
    alt: 0,
    pow: 0,
    time: undefined,
  };
}

export const F16State: MessageFns<F16State> = {
  encode(message: F16State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vt !== 0) {
      writer.uint32(9).double(message.vt);
    }
    if (message.alpha !== 0) {
      writer.uint32(17).double(message.alpha);
    }
    if (message.beta !== 0) {
      writer.uint32(25).double(message.beta);
    }
    if (message.phi !== 0) {
      writer.uint32(33).double(message.phi);
    }
    if (message.theta !== 0) {
      writer.uint32(41).double(message.theta);
    }
    if (message.psi !== 0) {
      writer.uint32(49).double(message.psi);
    }
    if (message.p !== 0) {
      writer.uint32(57).double(message.p);
    }
    if (message.q !== 0) {
      writer.uint32(65).double(message.q);
    }
    if (message.r !== 0) {
      writer.uint32(73).double(message.r);
    }
    if (message.lat !== 0) {
      writer.uint32(81).double(message.lat);
    }
    if (message.lon !== 0) {
      writer.uint32(89).double(message.lon);
    }
    if (message.alt !== 0) {
      writer.uint32(97).double(message.alt);
    }
    if (message.pow !== 0) {
      writer.uint32(105).double(message.pow);
    }
    if (message.time !== undefined) {
      writer.uint32(113).double(message.time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): F16State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseF16State();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.vt = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.alpha = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.beta = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.phi = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.theta = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.psi = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.p = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.q = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.r = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.lat = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.lon = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 97) {
            break;
          }

          message.alt = reader.double();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.pow = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.time = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): F16State {
    return {
      vt: isSet(object.vt) ? globalThis.Number(object.vt) : 0,
      alpha: isSet(object.alpha) ? globalThis.Number(object.alpha) : 0,
      beta: isSet(object.beta) ? globalThis.Number(object.beta) : 0,
      phi: isSet(object.phi) ? globalThis.Number(object.phi) : 0,
      theta: isSet(object.theta) ? globalThis.Number(object.theta) : 0,
      psi: isSet(object.psi) ? globalThis.Number(object.psi) : 0,
      p: isSet(object.p) ? globalThis.Number(object.p) : 0,
      q: isSet(object.q) ? globalThis.Number(object.q) : 0,
      r: isSet(object.r) ? globalThis.Number(object.r) : 0,
      lat: isSet(object.lat) ? globalThis.Number(object.lat) : 0,
      lon: isSet(object.lon) ? globalThis.Number(object.lon) : 0,
      alt: isSet(object.alt) ? globalThis.Number(object.alt) : 0,
      pow: isSet(object.pow) ? globalThis.Number(object.pow) : 0,
      time: isSet(object.time) ? globalThis.Number(object.time) : undefined,
    };
  },

  toJSON(message: F16State): unknown {
    const obj: any = {};
    if (message.vt !== 0) {
      obj.vt = message.vt;
    }
    if (message.alpha !== 0) {
      obj.alpha = message.alpha;
    }
    if (message.beta !== 0) {
      obj.beta = message.beta;
    }
    if (message.phi !== 0) {
      obj.phi = message.phi;
    }
    if (message.theta !== 0) {
      obj.theta = message.theta;
    }
    if (message.psi !== 0) {
      obj.psi = message.psi;
    }
    if (message.p !== 0) {
      obj.p = message.p;
    }
    if (message.q !== 0) {
      obj.q = message.q;
    }
    if (message.r !== 0) {
      obj.r = message.r;
    }
    if (message.lat !== 0) {
      obj.lat = message.lat;
    }
    if (message.lon !== 0) {
      obj.lon = message.lon;
    }
    if (message.alt !== 0) {
      obj.alt = message.alt;
    }
    if (message.pow !== 0) {
      obj.pow = message.pow;
    }
    if (message.time !== undefined) {
      obj.time = message.time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<F16State>, I>>(base?: I): F16State {
    return F16State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<F16State>, I>>(object: I): F16State {
    const message = createBaseF16State();
    message.vt = object.vt ?? 0;
    message.alpha = object.alpha ?? 0;
    message.beta = object.beta ?? 0;
    message.phi = object.phi ?? 0;
    message.theta = object.theta ?? 0;
    message.psi = object.psi ?? 0;
    message.p = object.p ?? 0;
    message.q = object.q ?? 0;
    message.r = object.r ?? 0;
    message.lat = object.lat ?? 0;
    message.lon = object.lon ?? 0;
    message.alt = object.alt ?? 0;
    message.pow = object.pow ?? 0;
    message.time = object.time ?? undefined;
    return message;
  },
};

function createBasePosition(): Position {
  return { alt: 0, lat: 0, lon: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.alt !== 0) {
      writer.uint32(9).double(message.alt);
    }
    if (message.lat !== 0) {
      writer.uint32(17).double(message.lat);
    }
    if (message.lon !== 0) {
      writer.uint32(25).double(message.lon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.alt = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.lat = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.lon = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      alt: isSet(object.alt) ? globalThis.Number(object.alt) : 0,
      lat: isSet(object.lat) ? globalThis.Number(object.lat) : 0,
      lon: isSet(object.lon) ? globalThis.Number(object.lon) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.alt !== 0) {
      obj.alt = message.alt;
    }
    if (message.lat !== 0) {
      obj.lat = message.lat;
    }
    if (message.lon !== 0) {
      obj.lon = message.lon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.alt = object.alt ?? 0;
    message.lat = object.lat ?? 0;
    message.lon = object.lon ?? 0;
    return message;
  },
};

function createBaseTarget(): Target {
  return { id: 0, init_state: undefined, waypoints: [] };
}

export const Target: MessageFns<Target> = {
  encode(message: Target, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.init_state !== undefined) {
      F16State.encode(message.init_state, writer.uint32(18).fork()).join();
    }
    for (const v of message.waypoints) {
      Position.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Target {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.init_state = F16State.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.waypoints.push(Position.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Target {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      init_state: isSet(object.init_state) ? F16State.fromJSON(object.init_state) : undefined,
      waypoints: globalThis.Array.isArray(object?.waypoints)
        ? object.waypoints.map((e: any) => Position.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Target): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.init_state !== undefined) {
      obj.init_state = F16State.toJSON(message.init_state);
    }
    if (message.waypoints?.length) {
      obj.waypoints = message.waypoints.map((e) => Position.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Target>, I>>(base?: I): Target {
    return Target.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Target>, I>>(object: I): Target {
    const message = createBaseTarget();
    message.id = object.id ?? 0;
    message.init_state = (object.init_state !== undefined && object.init_state !== null)
      ? F16State.fromPartial(object.init_state)
      : undefined;
    message.waypoints = object.waypoints?.map((e) => Position.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSimulation(): Simulation {
  return { targets: [], time_step: 0, max_time: 0 };
}

export const Simulation: MessageFns<Simulation> = {
  encode(message: Simulation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targets) {
      Target.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.time_step !== 0) {
      writer.uint32(17).double(message.time_step);
    }
    if (message.max_time !== 0) {
      writer.uint32(25).double(message.max_time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Simulation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.targets.push(Target.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.time_step = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.max_time = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Simulation {
    return {
      targets: globalThis.Array.isArray(object?.targets) ? object.targets.map((e: any) => Target.fromJSON(e)) : [],
      time_step: isSet(object.time_step) ? globalThis.Number(object.time_step) : 0,
      max_time: isSet(object.max_time) ? globalThis.Number(object.max_time) : 0,
    };
  },

  toJSON(message: Simulation): unknown {
    const obj: any = {};
    if (message.targets?.length) {
      obj.targets = message.targets.map((e) => Target.toJSON(e));
    }
    if (message.time_step !== 0) {
      obj.time_step = message.time_step;
    }
    if (message.max_time !== 0) {
      obj.max_time = message.max_time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Simulation>, I>>(base?: I): Simulation {
    return Simulation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Simulation>, I>>(object: I): Simulation {
    const message = createBaseSimulation();
    message.targets = object.targets?.map((e) => Target.fromPartial(e)) || [];
    message.time_step = object.time_step ?? 0;
    message.max_time = object.max_time ?? 0;
    return message;
  },
};

function createBaseSimulationResult(): SimulationResult {
  return { target_id: 0, waypoints: [], run_time: 0, final_state: [] };
}

export const SimulationResult: MessageFns<SimulationResult> = {
  encode(message: SimulationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target_id !== 0) {
      writer.uint32(8).uint32(message.target_id);
    }
    for (const v of message.waypoints) {
      Position.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.run_time !== 0) {
      writer.uint32(25).double(message.run_time);
    }
    for (const v of message.final_state) {
      F16State.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.target_id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.waypoints.push(Position.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.run_time = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.final_state.push(F16State.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulationResult {
    return {
      target_id: isSet(object.target_id) ? globalThis.Number(object.target_id) : 0,
      waypoints: globalThis.Array.isArray(object?.waypoints)
        ? object.waypoints.map((e: any) => Position.fromJSON(e))
        : [],
      run_time: isSet(object.run_time) ? globalThis.Number(object.run_time) : 0,
      final_state: globalThis.Array.isArray(object?.final_state)
        ? object.final_state.map((e: any) => F16State.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SimulationResult): unknown {
    const obj: any = {};
    if (message.target_id !== 0) {
      obj.target_id = Math.round(message.target_id);
    }
    if (message.waypoints?.length) {
      obj.waypoints = message.waypoints.map((e) => Position.toJSON(e));
    }
    if (message.run_time !== 0) {
      obj.run_time = message.run_time;
    }
    if (message.final_state?.length) {
      obj.final_state = message.final_state.map((e) => F16State.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimulationResult>, I>>(base?: I): SimulationResult {
    return SimulationResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimulationResult>, I>>(object: I): SimulationResult {
    const message = createBaseSimulationResult();
    message.target_id = object.target_id ?? 0;
    message.waypoints = object.waypoints?.map((e) => Position.fromPartial(e)) || [];
    message.run_time = object.run_time ?? 0;
    message.final_state = object.final_state?.map((e) => F16State.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSimulationResultList(): SimulationResultList {
  return { results: [] };
}

export const SimulationResultList: MessageFns<SimulationResultList> = {
  encode(message: SimulationResultList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      SimulationResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulationResultList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulationResultList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.results.push(SimulationResult.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulationResultList {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => SimulationResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SimulationResultList): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => SimulationResult.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimulationResultList>, I>>(base?: I): SimulationResultList {
    return SimulationResultList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimulationResultList>, I>>(object: I): SimulationResultList {
    const message = createBaseSimulationResultList();
    message.results = object.results?.map((e) => SimulationResult.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
